const http = require("http");
const APP = require("../app");

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

const port = normalizePort(process.env.PORT || "3000");
 
// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

const host = process.env.HOST || "127.0.0.1";

// Create HTTP server.
const server = http.createServer(APP);

// Listen on provided port and host.
server.listen(port, host);
server.on("error", onError);
server.on("listening", () => {
  console.info(`Server started on ${new Date()}`);
  console.info(
    `server is running at http://${server.address().address}:${
      server.address().port
    }`
  );
});
